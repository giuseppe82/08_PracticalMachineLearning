IL_col_idx <- grep("^[Ii][Ll].*", names(training))
IL_col_idx
names(training[IL_col_idx])
preProc <- preProcess(training[,IL_col_idx], method="pca", tresh = 0.9)
preProc
names(training[,IL_col_idx])
preProc <- preProcess(training[ ,IL_col_idx], method=c("center", "scale", "pca", tresh = 0.9)
method=c("center", "scale", "pca"), tresh = 0.9)
preProc
method=c("center", "scale", "pca"), thresh = 0.9)
preProc <- preProcess(training[ ,IL_col_idx],
method=c("center", "scale", "pca"), thresh = 0.9)
preProc
names(preProc)
new_training <- training[,c(names(training[,IL_col_idx], "diagnosis"))]
new_training <- training[,c(names(training[,IL_col_idx]), "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
new_testing <- testing[,c(names(testing[,IL_col_idx]), "diagnosis")]
names(new_testing)
train_no_PCA <- predict(new_training)
train_no_PCA <- train(diagnosis~., method = "glm", data = new_training)
train_no_PCA <- train(diagnosis ~., method = "glm", data = new_training)
train_no_PCA <- train(diagnosis ~., data = new_training, method = "glm")
# Question 5.
# We want to create training data set consisting of only the predictors
# with variable names beginning with IL and the diagnosis.
new_training <- training[,c(names(training[,IL_col_idx]), "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
new_testing <- testing[,c(names(testing[,IL_col_idx]), "diagnosis")]
names(new_testing)
## building predictive models, using the predictors as they are
train_no_PCA <- train(diagnosis ~., data = new_training, method = "glm")
install.packages('e1071', dependencies=TRUE)
# Question 5.
# We want to create training data set consisting of only the predictors
# with variable names beginning with IL and the diagnosis.
new_training <- training[,c(names(training[,IL_col_idx]), "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
new_testing <- testing[,c(names(testing[,IL_col_idx]), "diagnosis")]
names(new_testing)
## building predictive models, using the predictors as they are
train_no_PCA <- train(diagnosis ~., data = new_training, method = "glm")
confusionMatrix(new_testing, predict(train_no_PCA, new_testing))
confusionMatrix(new_testing[,10], predict(train_no_PCA, new_testing[,10]))
confusionMatrix(new_testing[,13], predict(train_no_PCA, new_testing[,13]))
confusionMatrix(new_testing[, 13], predict(train_no_PCA, new_testing[, -13]))
confusionMatrix(new_testing[, 10], predict(train_no_PCA, new_testing[, -10]))
confusionMatrix(new_testing[, 10], predict(train_no_PCA, new_testing[, -13]))
confusionMatrix(new_testing[, 13], predict(train_no_PCA, new_testing[, -13]))
method=c("center", "scale", "pca"), thresh = 0.9)
preProc <- preProcess(new_training[ ,-13],
method=c("center", "scale", "pca"), thresh = 0.9)
preProc <- preProcess(new_training[ ,13],
method=c("center", "scale", "pca"), thresh = 0.9)
preProc <- preProcess(new_training[ ,-13],
method=c("center", "scale", "pca"), thresh = 0.9)
trainPC <- predict(preProc,new_training[,-13])
testPC <- predict(preProc,new_testing[,-13])
confusionMatrix(new_testing[,13], predict(modelFit,testPC))
preProc <- preProcess(new_training[ ,-13],
method=c("center", "scale", "pca"), thresh = 0.9)
trainPC <- predict(preProc,new_training[,-13])
modelFit <- train(new_training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,new_testing[,-13])
confusionMatrix(new_testing[,13], predict(modelFit,testPC))
## with PCA
preProc <- preProcess(new_training[ ,-13],
method=c("center", "scale", "pca"), thresh = 0.8)
trainPC <- predict(preProc,new_training[,-13])
modelFit <- train(new_training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,new_testing[,-13])
confusionMatrix(new_testing[,13], predict(modelFit,testPC))
new_training <- training[,c(names(training[,IL_col_idx]), "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
new_testing <- testing[,c(names(testing[,IL_col_idx]), "diagnosis")]
names(new_testing)
## building predictive models, using the predictors as they are
train_no_PCA <- train(diagnosis ~., data = new_training, method = "glm")
confusionMatrix(new_testing[, 13], predict(train_no_PCA, new_testing[, -13]))
## with PCA
preProc <- preProcess(new_training[ ,-13],
method=c("center", "scale", "pca"), thresh = 0.8)
trainPC <- predict(preProc,new_training[,-13])
modelFit <- train(new_training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,new_testing[,-13])
confusionMatrix(new_testing[,13], predict(modelFit,testPC))
library(AppliedPredictiveModeling)
AppliedPredictiveModeling::bookTheme()
version(AppliedPredictiveModeling)
packageVersion("AppliedPredictiveModeling")
packageVersion("caret")
packageVersion(ElemStatLearn)
install.packages("ElemStatLearn")
packageVersion(ElemStatLearn)
packageVersion("ElemStatLearn")
packageVersion("pgmm")
install.packages(pgmm)
install.packages("pgmm")
install.packages(pgmm)
install.packages("pgmm")
packageVersion("pgmm")
packageVersion("rpart")
segmentationOriginal
data("segmentationOriginal")
data <- data("segmentationOriginal")
data
head(data)
head(data)
segmentationOriginal$Case
adData = data.frame(Case)
data
segmentationOriginal$Case
data(AlzheimerDisease)
data
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
adData
summary(adData)
data("segmentationOriginal")
adData = data.frame(segmentationOriginal$Case)
adData
trainIndex = createDataPartition(segmentationOriginal$Case, p = 3/4, list = FALSE)
createDataPartition
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
library(caret)
createDataPartition()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
```
1. Subset the data to a training set and testing set based on the Case variable in the data set:
```{r, echo=FALSE}
adData = data.frame(segmentationOriginal$Case)
trainIndex = createDataPartition(segmentationOriginal$Case, p = 3/4, list = FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
```
segmentationOriginal$Case
trainIndex = createDataPartition(Case, p = 3/4, list = FALSE)
data_new <- segmentationOriginal$Case
trainIndex = createDataPartition(data_new, p = 3/4, list = FALSE)
training = data_new[trainIndex, ]
training = data_new[trainIndex]
testing = data_new[-trainIndex]
training
testing
# Question 1.
library(AppliedPredictiveModeling); data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
testing
trainIndex = createDataPartition(y = segmentationOriginal$Case,
p = 3/4, list = FALSE)
training = segmentationOriginal[trainIndex]
testing  = segmentationOriginal[-trainIndex]
# fit clssification tree as a model
modFit <- train(Case ~ ., method = "rpart", data = training)
trainIndex = createDataPartition(y = segmentationOriginal$Case,
p = 3/4, list = FALSE)
training = segmentationOriginal[trainIndex]
testing  = segmentationOriginal[-trainIndex]
# fit clssification tree as a model
modFit <- train(segmentationOriginal$Case ~ ., method = "rpart", data = training)
modFit <- train(segmentationOriginal$Case ~., method = "rpart", data = training)
modFit <- train(segmentationOriginal$Case~., method = "rpart", data = training)
train(segmentationOriginal$Case ~ ., method="rpart", data = training)
train(segmentationOriginal$Case ~ ., method="rpart", data = testing)
train(training ~ ., method="rpart", data = testing)
train(training~., method="rpart", data = testing)
rpart
install.packages("rpart")
install.packages("rpart")
train(segmentationOriginal$Case ~ ., method="rpart", data = training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
trainIndex = createDataPartition(y = segmentationOriginal$Case,
p = 3/4, list = FALSE)
training = segmentationOriginal[trainIndex]
testing  = segmentationOriginal[-trainIndex]
modFit <- train(segmentationOriginal$Case~., method = "rpart", data = training)
inTrain = createDataPartition(y = segmentationOriginal$Case,
p = 3/4, list = FALSE)
training = segmentationOriginal[inTrain]
testing  = segmentationOriginal[-inTrain]
training
testing
length(training)
length(testing)
inTrain = createDataPartition(y = segmentationOriginal$Case,
p = 3/4, list = FALSE)
training = segmentationOriginal$Case[inTrain]
testing  = segmentationOriginal$Case[-inTrain]
training
testing
mySet <- segmentationOriginal$Case
inTrain = createDataPartition(y = myset,
p = 3/4, list = FALSE)
training = mySet[inTrain]
testing  = mySet[-inTrain]
# fit clssification tree as a model
modFit <- train(mySet~., method = "rpart", data = training)
mySet <- segmentationOriginal$Case
inTrain = createDataPartition(y = mySet,
p = 3/4, list = FALSE)
training = mySet[inTrain]
testing  = mySet[-inTrain]
# fit clssification tree as a model
modFit <- train(mySet~., method = "rpart", data = training)
training
testing
length(training)
length(testing)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
mySet <- segmentationOriginal$Case
inTrain = createDataPartition(y = mySet,
p = 3/4, list = FALSE)
training = mySet[inTrain]
testing  = mySet[-inTrain]
modFit <- train(mySet~., method = "rpart", data = training)
set.seed(125)
#mySet <- segmentationOriginal$Case
inTrain = createDataPartition(segmentationOriginal$Case,
p = 3/4, list = FALSE)
training = segmentationOriginal[inTrain]
testing  = segmentationOriginal[-inTrain]
testing
training
modFit <- train(segmentationOriginal$Case~., method = "rpart", data = training)
inTrain = createDataPartition(segmentationOriginal$Case,
p = 3/4, list = FALSE)
training = segmentationOriginal[inTrain]
testing  = segmentationOriginal[-inTrain]
# fit clssification tree as a model
modFit <- train(segmentationOriginal$Case ~ ., method = "rpart", data = training)
# print the classification tree
print(modFit$finalModel)
training = segmentationOriginal$Case[inTrain]
testing  = segmentationOriginal$Case[-inTrain]
# fit clssification tree as a model
modFit <- train(segmentationOriginal$Case ~ ., method = "rpart", data = training)
testing
training
testing
training<- subset(segmentationOriginal,Case=="Train")
training
inTrain = createDataPartition(segmentationOriginal$Case,
p = 3/4, list = FALSE)
training = segmentationOriginal[inTrain]
testing  = segmentationOriginal[-inTrain]
training
segmentationOriginal
head(segmentationOriginal)
library(rpart)
install.packages(rattle)
install.packages("rattle")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
```
training = subset(segmentationOriginal, Case == "Train")
testing  = subset(segmentationOriginal, Case == "Test")
trining
training
testing
library(rpart)
set.seed(125)
# fit clssification tree as a model
modFit <- train(Class ~ ., method = "rpart", data = training)
# print the classification tree
print(modFit$finalModel)
library(rattle)
library(rattle)
library(ggplot2)
rattle::fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
inTrain = createDataPartitiony = segmentationOriginal$Case, p = 3/4, list = FALSE)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 3/4, list = FALSE)
training = segmentationOriginal[inTrain]
testing  = segmentationOriginal[-inTrain]
training
testing
length(training)
length(testing)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 3/4, list = FALSE)
training = segmentationOriginal[inTrain,]
testing  = segmentationOriginal[-inTrain,]
length(testing)
length(training)
training
training = subset(segmentationOriginal, Case == "Train")
length(training)
str(segmentationOriginal)
segmentationOriginal[inTrain]
segmentationOriginal[inTrain,]
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
olive
str(olive)
modFit <- train(Area ~ ., method = "rpart", data = olive)
# print the classification tree
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
rattle::fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
# predict on newdata values
predict(modFit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
SAheart
head(SAheart)
set.seed(13234)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
```
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family(binomial()), data = trainSA)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
modFit <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA)
prediction <- predict(modFit, trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,prediction)
prediction <- predict(modFit, trainSA)
prediction
prediction <- as.numeric(predict(modFit, trainSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,prediction)
prediction
prediction <- as.factor(predict(modFit, trainSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,prediction)
missClass()
missClass
prediction <- as.factor(predict(modFit, trainSA))
resulut <- missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prediction <- as.factor(predict(modFit, trainSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
result <- missClass(trainSA,prediction)
prediction <- predict(modFit, testSA)
prediction
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
result <- missClass(testSA$chd,prediction)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
```
prediction <- predict(modFit, testSA)
prediction
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
result <- missClass(testSA$chd,prediction)
```
result
testSA
head(testSA)
prediction
str(prediction)
heaad(prediction)
head(prediction)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prediction_trainset <- predict(modFit, trainSA)
prediction_testset <- predict(modFit, testSA)
missClass(trainSA,prediction)
missClass(testSA,prediction)
missClass(trainSA$chd,prediction)
missClass(testSA$chd,prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test
vowel.train
vowel.test$y
as.factor(vowel.test$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
training <- vowel.train
testing <- vowel.test
set.seed(33833)
modFit <- train (as.factor(y) ~ ., data = training, method = "rf", prox = TRUE)
head(getTree(modFit$finalModel, k = 2))
varImp(modFit)
modFit <- train (as.factor(y) ~ ., data = training, method = "rf", prox = TRUE)
# return the second tree
head(getTree(modFit$finalModel, k = 2))
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
training <- vowel.train
testing <- vowel.test
set.seed(33833)
modFit <- train (as.factor(y) ~ ., data = testing, method = "rf", prox = TRUE)
head(getTree(modFit$finalModel, k = 2))
varImp(modFit)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
```
modFit <- train (y ~ ., data = vowel.train, method = "rf", prox = TRUE)
varImp(modFit)
order(varImp(modFit), decreasing = T)
modFit <- randomForest(y ~., data = vowel.train)
varImp(modFit)
order(varImp(modFit), decreasing = T)
vaImp(modFit)
varImp(modFit)
training <-vowel.train
testing <- vowel.test
set.seed(33833)
modFit <- randomForest(as.factor(y) ~., data = training)
head(getTree(modFit$finalModel, k = 2))
modFit <- randomForest(as.factor(y) ~., data = training)
varImp(modFit)
order(varImp(modFit), decreasing = T)
training <-vowel.train
testing <- vowel.test
set.seed(33833)
modFit <- randomForest(as.factor(y) ~., data = training)
order(varImp(modFit), decreasing = T)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 3/4, list = FALSE)
training = segmentationOriginal[inTrain,]
testing  = segmentationOriginal[-inTrain,]
library(rpart)
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
print(modFit$finalModel)
library(ggplot2)
suppressMessages(library(rattle))
library(rpart.plot)
rattle::fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method = "rpart", data = olive)
print(modFit$finalModel)
rattle::fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prediction_trainset <- predict(modFit, trainSA)
prediction_testset <- predict(modFit, testSA)
missClass(trainSA$chd,prediction_trainset)
missClass(testSA$chd,prediction_testset)
training <-vowel.train
testing <- vowel.test
set.seed(33833)
modFit <- randomForest(as.factor(y) ~., data = training)
order(varImp(modFit), decreasing = T)
install.packages("RGtk2")
install.packages("RGtk2")
install.packages("RGtk2")
setwd("/Users/joedibernardo/Projects/DATASCIENCE/08_PracticalMachineLearning/week4")
# 1. Check if file exists, and download file
filename_1 <- "pml-training.csv"
filename_2 <- "pml-testing.csv"
if(!file.exists(filename_1)){
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileUrl, destfile = filename_1, method = "curl")
dateDownloaded <- date() # record the download date
}
if(!file.exists(filename_2)){
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl, destfile = filename_2, method = "curl")
dateDownloaded <- date() # record the download date
}
Let's set working directory -- absolute path
training_raw <- read.csv(filename_1, header = TRUE, sep = ",",
stringsAsFactors = FALSE,
na.strings = c("","NA","#DIV/0!"))
testing_raw  <- read.csv(filename_2, header = TRUE, sep = ",",
stringsAsFactors = FALSE,
na.strings = c("","NA","#DIV/0!"))
```
kjdsakj
setwd("/Users/joedibernardo/Projects/DATASCIENCE/08_PracticalMachineLearning/week4")
setwd("/Users/joedibernardo/Projects/DATASCIENCE/08_PracticalMachineLearning/week4")
2+2
